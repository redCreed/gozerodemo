// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName                     = "/user.User/Login"
	User_UserInfo_FullMethodName                  = "/user.User/UserInfo"
	User_AddUserReceiveAddress_FullMethodName     = "/user.User/addUserReceiveAddress"
	User_EditUserReceiveAddress_FullMethodName    = "/user.User/editUserReceiveAddress"
	User_DelUserReceiveAddress_FullMethodName     = "/user.User/delUserReceiveAddress"
	User_GetUserReceiveAddressList_FullMethodName = "/user.User/getUserReceiveAddressList"
	User_AddUserCollection_FullMethodName         = "/user.User/addUserCollection"
	User_DelUserCollection_FullMethodName         = "/user.User/delUserCollection"
	User_GetUserCollectionList_FullMethodName     = "/user.User/getUserCollectionList"
	User_GetUserReceiveAddressInfo_FullMethodName = "/user.User/getUserReceiveAddressInfo"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取用户信息
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 添加收获地址
	AddUserReceiveAddress(ctx context.Context, in *UserReceiveAddressAddReq, opts ...grpc.CallOption) (*UserReceiveAddressAddRes, error)
	// 编辑收获地址
	EditUserReceiveAddress(ctx context.Context, in *UserReceiveAddressEditReq, opts ...grpc.CallOption) (*UserReceiveAddressEditRes, error)
	// 删除收获地址
	DelUserReceiveAddress(ctx context.Context, in *UserReceiveAddressDelReq, opts ...grpc.CallOption) (*UserReceiveAddressDelRes, error)
	// 获取收获地址列表
	GetUserReceiveAddressList(ctx context.Context, in *UserReceiveAddressListReq, opts ...grpc.CallOption) (*UserReceiveAddressListRes, error)
	// 添加收藏
	AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddRes, error)
	// 删除收藏
	DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error)
	// 收藏列表
	GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListRes, error)
	// 根据主键id,查询收获地址
	GetUserReceiveAddressInfo(ctx context.Context, in *UserReceiveAddressInfoReq, opts ...grpc.CallOption) (*UserReceiveAddress, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, User_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserReceiveAddress(ctx context.Context, in *UserReceiveAddressAddReq, opts ...grpc.CallOption) (*UserReceiveAddressAddRes, error) {
	out := new(UserReceiveAddressAddRes)
	err := c.cc.Invoke(ctx, User_AddUserReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditUserReceiveAddress(ctx context.Context, in *UserReceiveAddressEditReq, opts ...grpc.CallOption) (*UserReceiveAddressEditRes, error) {
	out := new(UserReceiveAddressEditRes)
	err := c.cc.Invoke(ctx, User_EditUserReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserReceiveAddress(ctx context.Context, in *UserReceiveAddressDelReq, opts ...grpc.CallOption) (*UserReceiveAddressDelRes, error) {
	out := new(UserReceiveAddressDelRes)
	err := c.cc.Invoke(ctx, User_DelUserReceiveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserReceiveAddressList(ctx context.Context, in *UserReceiveAddressListReq, opts ...grpc.CallOption) (*UserReceiveAddressListRes, error) {
	out := new(UserReceiveAddressListRes)
	err := c.cc.Invoke(ctx, User_GetUserReceiveAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddRes, error) {
	out := new(UserCollectionAddRes)
	err := c.cc.Invoke(ctx, User_AddUserCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error) {
	out := new(UserCollectionDelRes)
	err := c.cc.Invoke(ctx, User_DelUserCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListRes, error) {
	out := new(UserCollectionListRes)
	err := c.cc.Invoke(ctx, User_GetUserCollectionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserReceiveAddressInfo(ctx context.Context, in *UserReceiveAddressInfoReq, opts ...grpc.CallOption) (*UserReceiveAddress, error) {
	out := new(UserReceiveAddress)
	err := c.cc.Invoke(ctx, User_GetUserReceiveAddressInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// 添加收获地址
	AddUserReceiveAddress(context.Context, *UserReceiveAddressAddReq) (*UserReceiveAddressAddRes, error)
	// 编辑收获地址
	EditUserReceiveAddress(context.Context, *UserReceiveAddressEditReq) (*UserReceiveAddressEditRes, error)
	// 删除收获地址
	DelUserReceiveAddress(context.Context, *UserReceiveAddressDelReq) (*UserReceiveAddressDelRes, error)
	// 获取收获地址列表
	GetUserReceiveAddressList(context.Context, *UserReceiveAddressListReq) (*UserReceiveAddressListRes, error)
	// 添加收藏
	AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddRes, error)
	// 删除收藏
	DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelRes, error)
	// 收藏列表
	GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListRes, error)
	// 根据主键id,查询收获地址
	GetUserReceiveAddressInfo(context.Context, *UserReceiveAddressInfoReq) (*UserReceiveAddress, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServer) AddUserReceiveAddress(context.Context, *UserReceiveAddressAddReq) (*UserReceiveAddressAddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) EditUserReceiveAddress(context.Context, *UserReceiveAddressEditReq) (*UserReceiveAddressEditRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) DelUserReceiveAddress(context.Context, *UserReceiveAddressDelReq) (*UserReceiveAddressDelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) GetUserReceiveAddressList(context.Context, *UserReceiveAddressListReq) (*UserReceiveAddressListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReceiveAddressList not implemented")
}
func (UnimplementedUserServer) AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserCollection not implemented")
}
func (UnimplementedUserServer) DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserCollection not implemented")
}
func (UnimplementedUserServer) GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollectionList not implemented")
}
func (UnimplementedUserServer) GetUserReceiveAddressInfo(context.Context, *UserReceiveAddressInfoReq) (*UserReceiveAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReceiveAddressInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveAddressAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserReceiveAddress(ctx, req.(*UserReceiveAddressAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveAddressEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditUserReceiveAddress(ctx, req.(*UserReceiveAddressEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveAddressDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserReceiveAddress(ctx, req.(*UserReceiveAddressDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserReceiveAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserReceiveAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserReceiveAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserReceiveAddressList(ctx, req.(*UserReceiveAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserCollection(ctx, req.(*UserCollectionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserCollection(ctx, req.(*UserCollectionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserCollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCollectionList(ctx, req.(*UserCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserReceiveAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveAddressInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserReceiveAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserReceiveAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserReceiveAddressInfo(ctx, req.(*UserReceiveAddressInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _User_UserInfo_Handler,
		},
		{
			MethodName: "addUserReceiveAddress",
			Handler:    _User_AddUserReceiveAddress_Handler,
		},
		{
			MethodName: "editUserReceiveAddress",
			Handler:    _User_EditUserReceiveAddress_Handler,
		},
		{
			MethodName: "delUserReceiveAddress",
			Handler:    _User_DelUserReceiveAddress_Handler,
		},
		{
			MethodName: "getUserReceiveAddressList",
			Handler:    _User_GetUserReceiveAddressList_Handler,
		},
		{
			MethodName: "addUserCollection",
			Handler:    _User_AddUserCollection_Handler,
		},
		{
			MethodName: "delUserCollection",
			Handler:    _User_DelUserCollection_Handler,
		},
		{
			MethodName: "getUserCollectionList",
			Handler:    _User_GetUserCollectionList_Handler,
		},
		{
			MethodName: "getUserReceiveAddressInfo",
			Handler:    _User_GetUserReceiveAddressInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
